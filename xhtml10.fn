def !DOCTYPE	[ `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">` ]
def html		[ newTag "html" prepend [ xmlns="http://www.w3.org/1999/xhtml"] ]
--def html		[ newTag "html" ]
def a			[ newTag "a" ]
def abbr		[ newTag "abbr" ]
def acronym		[ newTag "acronym" ]
def address		[ newTag "address" ]
def area		[ newEmptyTag "area" ]
def b			[ newTag "b" ]
def base		[ newEmptyTag "base" ]
def bdo			[ newTag "bdo" ]
def big			[ newTag "big" ]
def blockquote	[ newTag "blockquote" ]
def body		[ newTag "body" ]
def br			[ newEmptyTag "br" ]
def button		[ newTag "button" ]
def caption		[ newTag "caption" ]
def cite		[ newTag "cite" ]
def code		[ newTag "code" ]
def col			[ newEmptyTag "col" ]
def colgroup	[ newTag "colgroup" ]
def dd			[ newTag "dd" ]
def del			[ newTag "del" ]
def dfn			[ newTag "dfn" ]
def div			[ newTag "div" ]
def dl			[ newTag "dl" ]
def dt			[ newTag "dt" ]
def em			[ newTag "em" ]
def fieldset	[ newTag "fieldset" ]
def form		[ newTag "form" ]
def frame		[ newTag "frame" ]
def frameset	[ newTag "frameset" ]
def h1			[ newTag "h1" ]
def h2			[ newTag "h2" ]
def h3			[ newTag "h3" ]
def h4			[ newTag "h4" ]
def h5			[ newTag "h5" ]
def h6			[ newTag "h6" ]
def 'head		[ newTag "head" ] -- quoted because head is already defined
def hr			[ newEmptyTag "hr" ]
def i			[ newTag "i" ]
def iframe		[ newTag "iframe" ]
def img			[ newEmptyTag "img" ]
def input		[ newEmptyTag "input" ]
def ins			[ newTag "ins" ]
def kbd			[ newTag "kbd" ]
def label		[ newTag "label" ]
def legend		[ newTag "legend" ]
def li			[ newTag "li" ]
def link		[ newEmptyTag "link" ]
def 'map			[ newTag "map" ]
def meta		[ newEmptyTag "meta" ]
def noframes	[ newTag "noframes" ]
def noscript	[ newTag "noscript" ]
def object		[ newTag "object" ]
def ol			[ newTag "ol" ]
def optgroup	[ newTag "optgroup" ]
def option		[ newTag "option" ]
def p			[ newTag "p" ]
def param		[ newEmptyTag "param" ]
def pre			[ newTag "pre" ]
def q			[ newTag "q" ]
def samp		[ newTag "samp" ]
def script		[ newTag "script" ]
def select		[ newTag "select" ]
def small		[ newTag "small" ]
def span		[ newTag "span" ]
def strong		[ newTag "strong" ]
def style		[ newTag "style" ]
def sub			[ newTag "sub" ]
def sup			[ newTag "sup" ]
def table		[ newTag "table" ]
def tbody		[ newTag "tbody" ]
def td			[ newTag "td" ]
def textarea	[ newTag "textarea" ]
def tfoot		[ newTag "tfoot" ]
def th			[ newTag "th" ]
def thead		[ newTag "thead" ]
def title		[ newTag "title" ]
def tr			[ newTag "tr" ]
def tt			[ newTag "tt" ]
def ul			[ newTag "ul" ]
def var			[ newTag "var" ]

-- these two functions will be masked by the above definitions
def Map 'map
def Head 'head

-- General HTML generation...

-- TEST [ newTag "div" [ [id "blah"] [class "abc"] ] ]   "<html></html>"  "newTag with attrs"
-- TEST [ newTag "html" [] ]   "<html></html>"  "newTag"
--TEST [ newTag "a" [key "value"] [ "contents" ] ]


--newTag "div" [ id="myDiv" newTag "p" ["contents"] ]
-- newTag "a" [href="#" ; newTag "p" ["content"] ]

-- fold [
	-- prepend dip 'swap times 2 'prepend
	-- " " dip [show uncons] show
-- ]
-- "" [key="value" a="b"]

-- newTag "p" newTag "a" [href="#" "cheese"]
-- newTag "a" [href="#" "contents" ]
--TEST [ newTag "tr" [ newTag "td" '"contents" ] ] "<tr><td>contents</td></tr>"  "newTag nested"
TEST [ newEmptyTag "br" [class="a"] ] `<br class="a" />` "newEmptyTag"
TEST [ newTag "a" [href="#" "contents" ] ] `<a href="#">contents</a>` "newTag"
TEST [ renderOpenTag "td"  ]   "<td"    "renderOpenTag"
TEST [ renderContent [ newTag "a" "b" ] ]  "<a>b</a>"  "renderContent tag"
TEST [ renderContent '"list" ]  "list"  "renderContent list"
TEST [ renderContent "str" ]  "str"  "renderContent string"
TEST [ renderAttrs [`a="b"` `c="d"`] ] ` a="b" c="d"` "renderAttrs: several"
TEST [ renderAttrs [`a="b"`] ]   ` a="b"` "renderAttrs: one"
TEST [ renderAttrs []     ]   ""     "renderAttrs: none"
TEST [ renderCloseTag "x" ]   "</x>"  "renderCloseTag"
TEST [ cons dip 'cons partitionAttrs [] [ a="1" b="2" head d e ] [] ] 
    [ [`b="2"` `a="1"`] [head d e] ] "partitionAttrs containing defined word"

def newEmptyTag [ -- "id 'attrs 'content
	doif
		[
			times 2 'prepend
			renderOpenTag
			bury 2 " />"
			dip 'renderAttrs
			dig 2 'drop
		]
		'newTag
	exhume 2 dig 2 '*null
	dip [ partitionAttrs [] ]
]
def newTag [ -- "tag" 'content
	assembleTag
	times 2 'prepend
	renderOpenTag
	bury 2 ">"
	dip [
		renderAttrs
		dip [renderContent ]
		partitionAttrs []
	]
	bury 2 renderCloseTag dup
]
def renderContent [
	doif
		[]
		'apply
	*isString
]
def renderOpenTag  [ prepend "<" ]
def renderAttrs    [
	fold [ append cons .  ] []  -- beware! literal space character!
]
def renderCloseTag [ times 2 'prepend "</" swap ">"]

def partitionAttrs [ -- [] [content]
	doif
		[partitionAttrs cons prepend bury 2 dip [ for 2 [show uncons]] ]
		[]
	swap dip 'identifyAttr
]

def identifyAttr [
    -- if any of the words being examined with *head are 
    -- defined they will be evaluated as soon as 
	doif
		[= .= head reverse show *head] 
		'False
    doif
        [not defined *take 1]
        'False
	doif
		'False
		[= "word" type *take 1]
	*null 
]

def assembleTag [
	doif
		[assembleTag prepend]
		'prepend
	swap dip [!= "</" dip 'drop splitAt 2 dup]
]

-- Define these to do nothing so they can be used to make our
-- small HTML-writing DSL more readable...
def ; []
def , []

-- vim:filetype=funeral
