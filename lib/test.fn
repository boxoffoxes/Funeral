-- vim:filetype=funeral
-- test "1:" '1 1
-- test "2:" 'True True
-- test "3:" [ head [1 2 3] ]  1
-- test "4:" [ * dup 5 ] 25
-- test "5:" [ and "ok" True ] "ok"
-- test "6:" [ or "ok" False ] "ok"
-- test "7:" [ ifte "then" "else" True ] "then"
-- test "8:" [ ifte "then" "else" False ] "else"
-- test "9:" [ foldr '+ 0 [1 2 3 4 5] ] 15
-- test "10:" [ append "world" "hello " ] "hello world"
-- test "11:" [ concat ["a" "b" "c" "d" "e" "f"] ] "abcdef"


-- TEST [ cons dip 'cons partition [ = 0 % 2 ] [1 2 3 4] [] ]
--	 [ [2 4] [1 3] ]  "partition"

--break [a b]

--TEST [ overlay [[1 2] [3 4]] [[3 5] [5 6]] ] [[3 4] [1 2] [5 6]] "overlay"
TEST [ set x z [ [x y] [a b] [k v] ] ] [[x z] [a b] [k v]] "set"
TEST [ delete x [ [x y] [a b] [k v] ] ] [[a b] [k v]] "delete"
TEST [ lookup n [ [x y] [a b] [k v] ] ] [] "lookup failure"
TEST [ lookup k [ [x y] [a b] [k v] ] ] [k v] "lookup success"
TEST [ pair break ["a" "b"] ] ["a" "b"] "pair break"
TEST [ pair "a" "b" ] ["a" "b"] "pair creation"

TEST [ concat [ "abc" "def" "gh" "i" ] ] "abcdefghi"  "List concat"
TEST [ prepend "a" "bc" ] "abc"  "List prepend"
TEST [ cons *head [1 2 3] ] [1 1 2 3] "List *head"
TEST [ head [1 2 3] ] 1 "List head"
TEST [ cons partition 'even [1 2 3 4 5] ] [ [2 4] 1 3 5] "List partition"
TEST [ filter 'odd [1 2 3 4 5] ] [1 3 5] "List filter"
TEST [ length [a b c d e f g] ] 7 "List length"
TEST [ map [+ 1] [1 2 3] ] [2 3 4] "List map"
TEST [ reverse "hello" ] "olleh"  "List reversal"
TEST [ fold '+ 0 [ 1 2 3 4 5 ] ] 15 "List fold addition"

TEST [ times 3 [+ 1] 0 ]  3  "Repeated function application"
TEST [ ifte "then" "else" True ]  "then"  "ifte: True -> then"
TEST [ ifte "then" "else" False ] "else"  "ifte: False -> else"
TEST [ defined 'def  ] True   "defined"
TEST [ defined 'duff ] False  "not defined"

TEST [ cons uncons "test" ] "test" "uncons"
TEST [ cons .t "est" ] 		"test" "cons"

TEST [ % 3 10 ] 1 "modulus"
TEST [ / 3 10 ] 3 "division"
TEST [ * 2 3 ] 6 "multiplication"
TEST [ - 1 2 ] 1 "subtraction"
TEST [ + 1 2 ] 3 "addition"

TEST '1 1 "This TEST should succeed" 
TEST '1 2 "This TEST should fail"

def 'TEST [ 
	print doif 
		[append " :: ok" drop drop] 
		'_REPORT_FAILURE
	swap dip '= dup apply dip 'dup
]
def _REPORT_FAILURE [ -- act exp name -> msg
	append prepend
	prepend " :: FAILED. Expected " show swap
	prepend ". Actual " show -- actStr exp name
]
