-- vim:filetype=funeral

def TEST [ times 3 'drop ]

def merge [ -- [dict1] [dict2] // merge two dicts, replacing values in [dict2] with those from [dict1]
    drop
    times swap [ dip [set break] swap uncons ] *length 
]

def copyTo [ -- dest src [dict] // if key src exists and has a non-null value set key dest to have the same value
	doif
		[times 2 drop]
		[set dip 'snd]
	swap dip [*null *lookup]
]
def set [  -- key val [dict]
    cons            -- prepend the pair onto [dict]
    dip 'delete     -- delete any existing entry for key
    pair            -- create a pair from key and val
    dip 'swap dup   -- dup key and move next to [dict]
]

def delete [ -- key [dict]
    filter prepend 'not _pairFstMatch
]

def *lookup [ lookup dip 'dup ]
def lookup [  -- key [dict]
    doif
        []
        [head]
    *null
    filter _pairFstMatch
]

def _pairFstMatch [ -- key [pair] // returns a quoted search function.
    prepend prepend '= swap 'fst quote
]

def *snd [ snd dup ]
def snd [ -- [key val]
	doif 
		[head tail]
		[croak "snd called on non-pair value"] 
	*isPair
]
def *fst [ snd dup ]
def fst [ head ] -- [key val]

def break [
    doif
        [ dig 2 'drop for 2 'uncons ]
        [croak "break called on a non-pair value."]
    *isPair
]
def *isPair [ isPair dup ]
def isPair [ = 2 length ] -- [pair]
def pair [  -- key val -> [key val]
    cons
    dip [ cons swap [] ]
]

def *isString [ isString dup ]
def concat [ fold 'append [] ]

def intersperse [ -- "str" [list]
]

def prepend [ append swap ]

def *partition [ partition dip 'dup ]
def partition [ -- 'pred [list]
	filter 
    dig 2 [filter append swap 'not]
    unrot dup2
]

def *filter [ filter dip 'dup ]
def filter [ -- 'pred [list]
    reverse drop drop
    times swap [ 
        doif
            [ dig 2 'cons unrot ]
            'drop
        rot uncons dip 'uncons 
    ] *length
    unrot [] swap *map
]

def *length [length dup]
def length [
    fold [+ 1 drop] 0
]

-- def file [ -- 'pred [dest1] [dest2] elem
-- 	doif
-- 		[ dip exhume 2 ] -- file in dest1
-- 		[] -- file in dest2
-- 	rot dig 2 'apply unrot
-- 	dig 3 'dup
-- ]

def *map [ map dip 'dup ]
def map [ -- 'f [list]
    fold
	-- append 'swap
	append exhume 2  -- recover 'f
	'cons
	[]
	dip 'reverse
]

def foldr* [ fold dig 2 [reverse dup] ]
def foldr [ fold dig 2 'reverse ]

def reverse [ fold 'cons [] ]

def odd [= 1 % 2]
def even [= 0 % 2]

-- fold [fun] start [list]
def *fold [ fold dig 2 'dup ]
def fold [ -- 'f start [list] // repeats f .l start
	doif
		[ dip 'drop drop ]
		[ fold *apply dip 'swap dig 2 'uncons ]
	dip 'unrot *null rot
]

def dup2 [ dup dip 'dup ]
def rot  [ exhume 2 ]
def unrot [ bury 2 ]
def *null [ null dup ]

-- def while [ -- 'pred 'f // execute 'f while 'pred remains true
-- 	doif
-- 		[dip 'while exhume 2 dip '*apply]
-- 		[drop drop]
-- 	bury 2 dip [ swap *apply dip 'dup ] swap
-- ]

def for [ -- n 'fun // execute 'fun on the top n stack items
	doif
		[ dip [for - 1] exhume 2 dip '*apply ]
		[ drop drop ]
	> 0 dup
]

-- n [fun] // Repeat [fun] n times.
def times [
    doif 
		[ times - 1 dip '*apply ]
		[ drop drop ]
	> 0 dup
]
def *apply [ dip 'apply dup ]

def doif [ apply ifte ]
def ifte [ or dip 'and swap ]
def swap [ exhume 1 ]

-- DO NOT USE the head functions if there is any 
-- possibility of the quotation containing words
-- which are defined, as they will be evaluated 
-- immediately they are popped from the quotation!
def *tail [ tail dup ]
def tail [ drop uncons ]

def *head [ head dup ]
def head [ drop popDown ]

def *take [ dip 'drop splitAt dip 'dup ]
def take [ dip 'drop splitAt ]

def popDown  [swap uncons] -- [list] -> [ist] .l
def pushOnto [cons swap]   -- [ist] .l -> [list]

def IGNORE 'drop

def dip [ dig 1 ]
def *uncons [ uncons dup ]
def *type [type dup]
